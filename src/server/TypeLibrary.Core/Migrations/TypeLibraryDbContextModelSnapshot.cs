// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TypeLibrary.Data;

#nullable disable

namespace TypeLibrary.Core.Migrations
{
    [DbContext(typeof(TypeLibraryDbContext))]
    partial class TypeLibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Attribute_Unit", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("Attribute_Unit", (string)null);
                });

            modelBuilder.Entity("Node_Attribute", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeId", "NodeId");

                    b.HasIndex("NodeId");

                    b.ToTable("Node_Attribute", (string)null);
                });

            modelBuilder.Entity("Simple_Attribute", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SimpleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeId", "SimpleId");

                    b.HasIndex("SimpleId");

                    b.ToTable("Simple_Attribute", (string)null);
                });

            modelBuilder.Entity("Simple_Node", b =>
                {
                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SimpleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NodeId", "SimpleId");

                    b.HasIndex("SimpleId");

                    b.ToTable("Simple_Node", (string)null);
                });

            modelBuilder.Entity("Terminal_Attribute", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeId", "TerminalId");

                    b.HasIndex("TerminalId");

                    b.ToTable("Terminal_Attribute", (string)null);
                });

            modelBuilder.Entity("Transport_Attribute", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeId", "TransportId");

                    b.HasIndex("TransportId");

                    b.ToTable("Transport_Attribute", (string)null);
                });

            modelBuilder.Entity("Type_Collection", b =>
                {
                    b.Property<string>("CollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CollectionId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Type_Collection", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.AttributeDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Aspect");

                    b.Property<string>("ConditionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discipline");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Entity");

                    b.Property<string>("FormatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InterfaceDmId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QualifierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Select");

                    b.Property<string>("SelectValuesString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SelectValuesString");

                    b.Property<string>("SourceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tags");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("FormatId");

                    b.HasIndex("InterfaceDmId");

                    b.HasIndex("QualifierId");

                    b.HasIndex("SourceId");

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.AttributePredefinedDm", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Key");

                    b.Property<bool>("IsMultiSelect")
                        .HasColumnType("bit")
                        .HasColumnName("IsMultiSelect");

                    b.Property<string>("Values")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Values");

                    b.HasKey("Key");

                    b.ToTable("AttributePredefined", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.BlobDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Data");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discipline");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Blob", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.CollectionDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Collection", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.ConditionDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Condition", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.FormatDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Format", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.LocationDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Aspect");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentId");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.NodeTerminalDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ConnectorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Connector");

                    b.Property<string>("NodeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Number");

                    b.Property<string>("TerminalTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("TerminalTypeId");

                    b.ToTable("Node_Terminal", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.PurposeDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discipline");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Purpose", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.QualifierDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Qualifier", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.RdsCategoryDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("RdsCategory", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.RdsDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Aspect");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("RdsCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.HasKey("Id");

                    b.HasIndex("RdsCategoryId");

                    b.ToTable("Rds", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.SimpleDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Simple", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.SourceDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Source", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.TerminalDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Terminal", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.TypeDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("Aspect")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc))
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Unknown")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PurposeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PurposeId");

                    b.Property<string>("RdsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("4590637F39B6BA6F39C74293BE9138DF")
                        .HasColumnName("StatusId");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeId");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.HasIndex("PurposeId");

                    b.HasIndex("RdsId");

                    b.ToTable("Type", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("TypeDm");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.UnitDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.InterfaceDm", b =>
                {
                    b.HasBaseType("TypeLibrary.Models.Models.Data.TypeDm");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Interface_TerminalId");

                    b.HasIndex("TerminalId");

                    b.HasDiscriminator().HasValue("InterfaceDm");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.NodeDm", b =>
                {
                    b.HasBaseType("TypeLibrary.Models.Models.Data.TypeDm");

                    b.Property<string>("LocationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PredefinedAttributeData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymbolId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("NodeDm");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.TransportDm", b =>
                {
                    b.HasBaseType("TypeLibrary.Models.Models.Data.TypeDm");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Transport_TerminalId");

                    b.HasIndex("TerminalId");

                    b.HasDiscriminator().HasValue("TransportDm");
                });

            modelBuilder.Entity("Attribute_Unit", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.AttributeDm", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeLibrary.Models.Models.Data.UnitDm", null)
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Node_Attribute", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.AttributeDm", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeLibrary.Models.Models.Data.NodeDm", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Simple_Attribute", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.AttributeDm", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeLibrary.Models.Models.Data.SimpleDm", null)
                        .WithMany()
                        .HasForeignKey("SimpleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Simple_Node", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.NodeDm", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeLibrary.Models.Models.Data.SimpleDm", null)
                        .WithMany()
                        .HasForeignKey("SimpleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Terminal_Attribute", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.AttributeDm", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeLibrary.Models.Models.Data.TerminalDm", null)
                        .WithMany()
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transport_Attribute", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.AttributeDm", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeLibrary.Models.Models.Data.TransportDm", null)
                        .WithMany()
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Type_Collection", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.CollectionDm", null)
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeLibrary.Models.Models.Data.TypeDm", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.AttributeDm", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.ConditionDm", "ConditionDm")
                        .WithMany("AttributeList")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TypeLibrary.Models.Models.Data.FormatDm", "FormatDm")
                        .WithMany("AttributeList")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TypeLibrary.Models.Models.Data.InterfaceDm", null)
                        .WithMany("AttributeList")
                        .HasForeignKey("InterfaceDmId");

                    b.HasOne("TypeLibrary.Models.Models.Data.QualifierDm", "QualifierDm")
                        .WithMany("AttributeList")
                        .HasForeignKey("QualifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TypeLibrary.Models.Models.Data.SourceDm", "SourceDm")
                        .WithMany("AttributeList")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ConditionDm");

                    b.Navigation("FormatDm");

                    b.Navigation("QualifierDm");

                    b.Navigation("SourceDm");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.LocationDm", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.LocationDm", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.NodeTerminalDm", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.NodeDm", "NodeDm")
                        .WithMany("TerminalTypes")
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TypeLibrary.Models.Models.Data.TerminalDm", "TerminalDm")
                        .WithMany("Nodes")
                        .HasForeignKey("TerminalTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("NodeDm");

                    b.Navigation("TerminalDm");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.RdsDm", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.RdsCategoryDm", "RdsCategoryDm")
                        .WithMany("RdsList")
                        .HasForeignKey("RdsCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("RdsCategoryDm");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.TerminalDm", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.TerminalDm", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.TypeDm", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.PurposeDm", "PurposeDm")
                        .WithMany("LibraryTypes")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TypeLibrary.Models.Models.Data.RdsDm", "RdsDm")
                        .WithMany("LibraryTypes")
                        .HasForeignKey("RdsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PurposeDm");

                    b.Navigation("RdsDm");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.InterfaceDm", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.TerminalDm", "TerminalDm")
                        .WithMany("Interfaces")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TerminalDm");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.TransportDm", b =>
                {
                    b.HasOne("TypeLibrary.Models.Models.Data.TerminalDm", "TerminalDm")
                        .WithMany("Transports")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TerminalDm");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.ConditionDm", b =>
                {
                    b.Navigation("AttributeList");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.FormatDm", b =>
                {
                    b.Navigation("AttributeList");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.LocationDm", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.PurposeDm", b =>
                {
                    b.Navigation("LibraryTypes");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.QualifierDm", b =>
                {
                    b.Navigation("AttributeList");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.RdsCategoryDm", b =>
                {
                    b.Navigation("RdsList");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.RdsDm", b =>
                {
                    b.Navigation("LibraryTypes");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.SourceDm", b =>
                {
                    b.Navigation("AttributeList");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.TerminalDm", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Interfaces");

                    b.Navigation("Nodes");

                    b.Navigation("Transports");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.InterfaceDm", b =>
                {
                    b.Navigation("AttributeList");
                });

            modelBuilder.Entity("TypeLibrary.Models.Models.Data.NodeDm", b =>
                {
                    b.Navigation("TerminalTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
