// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TypeLibrary.Data;

#nullable disable

namespace TypeLibrary.Core.Migrations
{
    [DbContext(typeof(TypeLibraryDbContext))]
    partial class TypeLibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Attribute_Interface", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InterfaceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeId", "InterfaceId");

                    b.HasIndex("InterfaceId");

                    b.ToTable("Attribute_Interface", (string)null);
                });

            modelBuilder.Entity("Attribute_Node", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeId", "NodeId");

                    b.HasIndex("NodeId");

                    b.ToTable("Attribute_Node", (string)null);
                });

            modelBuilder.Entity("Attribute_Simple", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SimpleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeId", "SimpleId");

                    b.HasIndex("SimpleId");

                    b.ToTable("Attribute_Simple", (string)null);
                });

            modelBuilder.Entity("Attribute_Transport", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeId", "TransportId");

                    b.HasIndex("TransportId");

                    b.ToTable("Attribute_Transport", (string)null);
                });

            modelBuilder.Entity("Attribute_Unit", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("Attribute_Unit", (string)null);
                });

            modelBuilder.Entity("LibraryType_Collection", b =>
                {
                    b.Property<string>("CollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LibraryTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CollectionId", "LibraryTypeId");

                    b.HasIndex("LibraryTypeId");

                    b.ToTable("LibraryType_Collection", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeAspectLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Aspect");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentId");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("AttributeAspect", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeConditionLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("AttributeCondition", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeFormatLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("AttributeFormat", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Aspect");

                    b.Property<string>("AttributeConditionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttributeFormatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttributeQualifierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttributeSourceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discipline");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Entity");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Select")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Select");

                    b.Property<string>("SelectValuesString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SelectValuesString");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tags");

                    b.HasKey("Id");

                    b.HasIndex("AttributeConditionId");

                    b.HasIndex("AttributeFormatId");

                    b.HasIndex("AttributeQualifierId");

                    b.HasIndex("AttributeSourceId");

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributePredefinedLibDm", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Key");

                    b.Property<bool>("IsMultiSelect")
                        .HasColumnType("bit")
                        .HasColumnName("IsMultiSelect");

                    b.Property<string>("ValueStringList")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ValueStringList");

                    b.HasKey("Key");

                    b.ToTable("AttributePredefined", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeQualifierLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("AttributeQualifier", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeSourceLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("AttributeSource", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.BlobLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Data");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discipline");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Blob", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.CollectionLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Collection", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.LibraryTypeLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("Aspect")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc))
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Unknown")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstVersionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstVersionId");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PurposeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PurposeId");

                    b.Property<string>("RdsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("4590637F39B6BA6F39C74293BE9138DF")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.HasIndex("PurposeId");

                    b.HasIndex("RdsId");

                    b.ToTable("LibraryType", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("LibraryTypeLibDm");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.PurposeLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discipline");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Purpose", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.RdsCategoryLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("RdsCategory", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.RdsLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Aspect");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Code");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("RdsCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RdsCategoryId");

                    b.ToTable("Rds", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.SimpleLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Simple", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.TerminalLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Terminal", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.TerminalNodeLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ConnectorDirection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConnectorDirection");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Number");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.HasIndex("TerminalId");

                    b.ToTable("Terminal_Node", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.UnitLibDm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Iri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("Simple_Node", b =>
                {
                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SimpleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NodeId", "SimpleId");

                    b.HasIndex("SimpleId");

                    b.ToTable("Simple_Node", (string)null);
                });

            modelBuilder.Entity("Terminal_Attribute", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeId", "TerminalId");

                    b.HasIndex("TerminalId");

                    b.ToTable("Terminal_Attribute", (string)null);
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.InterfaceLibDm", b =>
                {
                    b.HasBaseType("Mimirorg.TypeLibrary.Models.Data.LibraryTypeLibDm");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Interface_TerminalId");

                    b.HasIndex("TerminalId");

                    b.HasDiscriminator().HasValue("InterfaceLibDm");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.NodeLibDm", b =>
                {
                    b.HasBaseType("Mimirorg.TypeLibrary.Models.Data.LibraryTypeLibDm");

                    b.Property<string>("AttributeAspectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributePredefined")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlobId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("NodeLibDm");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.TransportLibDm", b =>
                {
                    b.HasBaseType("Mimirorg.TypeLibrary.Models.Data.LibraryTypeLibDm");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Transport_TerminalId");

                    b.HasIndex("TerminalId");

                    b.HasDiscriminator().HasValue("TransportLibDm");
                });

            modelBuilder.Entity("Attribute_Interface", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.AttributeLibDm", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.InterfaceLibDm", null)
                        .WithMany()
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Attribute_Node", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.AttributeLibDm", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.NodeLibDm", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Attribute_Simple", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.AttributeLibDm", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.SimpleLibDm", null)
                        .WithMany()
                        .HasForeignKey("SimpleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Attribute_Transport", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.AttributeLibDm", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.TransportLibDm", null)
                        .WithMany()
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Attribute_Unit", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.AttributeLibDm", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.UnitLibDm", null)
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryType_Collection", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.CollectionLibDm", null)
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.LibraryTypeLibDm", null)
                        .WithMany()
                        .HasForeignKey("LibraryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeAspectLibDm", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.AttributeAspectLibDm", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeLibDm", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.AttributeConditionLibDm", "AttributeCondition")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeConditionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.AttributeFormatLibDm", "AttributeFormat")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeFormatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.AttributeQualifierLibDm", "AttributeQualifier")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeQualifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.AttributeSourceLibDm", "AttributeSource")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeSourceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AttributeCondition");

                    b.Navigation("AttributeFormat");

                    b.Navigation("AttributeQualifier");

                    b.Navigation("AttributeSource");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.LibraryTypeLibDm", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.PurposeLibDm", "Purpose")
                        .WithMany("LibraryTypes")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.RdsLibDm", "Rds")
                        .WithMany("LibraryTypes")
                        .HasForeignKey("RdsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Purpose");

                    b.Navigation("Rds");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.RdsLibDm", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.RdsCategoryLibDm", "RdsCategory")
                        .WithMany("RdsList")
                        .HasForeignKey("RdsCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("RdsCategory");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.TerminalLibDm", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.TerminalLibDm", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.TerminalNodeLibDm", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.NodeLibDm", "Node")
                        .WithMany("TerminalNodes")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.TerminalLibDm", "Terminal")
                        .WithMany("TerminalNodes")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Node");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("Simple_Node", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.NodeLibDm", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.SimpleLibDm", null)
                        .WithMany()
                        .HasForeignKey("SimpleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Terminal_Attribute", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.AttributeLibDm", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.TerminalLibDm", null)
                        .WithMany()
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.InterfaceLibDm", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.TerminalLibDm", "Terminal")
                        .WithMany("Interfaces")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.TransportLibDm", b =>
                {
                    b.HasOne("Mimirorg.TypeLibrary.Models.Data.TerminalLibDm", "Terminal")
                        .WithMany("Transports")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeAspectLibDm", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeConditionLibDm", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeFormatLibDm", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeQualifierLibDm", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.AttributeSourceLibDm", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.PurposeLibDm", b =>
                {
                    b.Navigation("LibraryTypes");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.RdsCategoryLibDm", b =>
                {
                    b.Navigation("RdsList");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.RdsLibDm", b =>
                {
                    b.Navigation("LibraryTypes");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.TerminalLibDm", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Interfaces");

                    b.Navigation("TerminalNodes");

                    b.Navigation("Transports");
                });

            modelBuilder.Entity("Mimirorg.TypeLibrary.Models.Data.NodeLibDm", b =>
                {
                    b.Navigation("TerminalNodes");
                });
#pragma warning restore 612, 618
        }
    }
}
