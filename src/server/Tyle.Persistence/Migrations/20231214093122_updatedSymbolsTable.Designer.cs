// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tyle.Persistence;

#nullable disable

namespace TypeLibrary.Data.Migrations
{
    [DbContext(typeof(TyleDbContext))]
    [Migration("20231214093122_updatedSymbolsTable")]
    partial class updatedSymbolsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tyle.Core.Attributes.AttributeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContributedBy")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("LastUpdateOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AttributeGroup", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Attributes.AttributeGroupAttributeJoin", b =>
                {
                    b.Property<Guid>("AttributeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttributeGroupId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeGroup_Attribute", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Attributes.AttributeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContributedBy")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("LastUpdateOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PredicateId")
                        .HasColumnType("int");

                    b.Property<string>("ProvenanceQualifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RangeQualifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegularityQualifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ScopeQualifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UnitMaxCount")
                        .HasColumnType("int");

                    b.Property<int>("UnitMinCount")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("PredicateId");

                    b.HasIndex("State");

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Attributes.AttributeUnitJoin", b =>
                {
                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("AttributeId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("Attribute_Unit", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Attributes.RdlPredicate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Iri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Iri")
                        .IsUnique();

                    b.ToTable("Predicate", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Attributes.RdlUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Iri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Iri")
                        .IsUnique();

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Attributes.ValueConstraint", b =>
                {
                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConstraintType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MaxCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxValue")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)");

                    b.Property<int>("MinCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinValue")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)");

                    b.Property<string>("Pattern")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AttributeId");

                    b.ToTable("ValueConstraint", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Attributes.ValueListEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EntryValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ValueConstraintId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ValueConstraintId");

                    b.ToTable("ValueListEntry", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Blocks.BlockAttributeTypeReference", b =>
                {
                    b.Property<Guid>("BlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttributeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaxCount")
                        .HasColumnType("int");

                    b.Property<int>("MinCount")
                        .HasColumnType("int");

                    b.HasKey("BlockId", "AttributeId");

                    b.HasIndex("AttributeGroupId");

                    b.HasIndex("AttributeId");

                    b.ToTable("Block_Attribute", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Blocks.BlockClassifierJoin", b =>
                {
                    b.Property<Guid>("BlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassifierId")
                        .HasColumnType("int");

                    b.HasKey("BlockId", "ClassifierId");

                    b.HasIndex("ClassifierId");

                    b.ToTable("Block_Classifier", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Blocks.BlockTerminalTypeReference", b =>
                {
                    b.Property<Guid>("BlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Direction")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ConnectionPointId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxCount")
                        .HasColumnType("int");

                    b.Property<int>("MinCount")
                        .HasColumnType("int");

                    b.HasKey("BlockId", "TerminalId", "Direction");

                    b.HasIndex("ConnectionPointId");

                    b.HasIndex("TerminalId");

                    b.ToTable("Block_Terminal", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Blocks.BlockType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aspect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContributedBy")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("LastUpdateOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PurposeId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SymbolId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("PurposeId");

                    b.HasIndex("State");

                    b.HasIndex("SymbolId");

                    b.ToTable("Block", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Blocks.ConnectionPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SymbolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId");

                    b.ToTable("ConnectionPoint", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Blocks.EngineeringSymbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Iri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Iri")
                        .IsUnique();

                    b.ToTable("Symbol", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Common.RdlClassifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Iri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Iri")
                        .IsUnique();

                    b.ToTable("Classifier", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Common.RdlPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Iri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Iri")
                        .IsUnique();

                    b.ToTable("Purpose", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Terminals.RdlMedium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Iri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Iri")
                        .IsUnique();

                    b.ToTable("Medium", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Terminals.TerminalAttributeTypeReference", b =>
                {
                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttributeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaxCount")
                        .HasColumnType("int");

                    b.Property<int>("MinCount")
                        .HasColumnType("int");

                    b.HasKey("TerminalId", "AttributeId");

                    b.HasIndex("AttributeGroupId");

                    b.HasIndex("AttributeId");

                    b.ToTable("Terminal_Attribute", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Terminals.TerminalClassifierJoin", b =>
                {
                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassifierId")
                        .HasColumnType("int");

                    b.HasKey("TerminalId", "ClassifierId");

                    b.HasIndex("ClassifierId");

                    b.ToTable("Terminal_Classifier", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Terminals.TerminalType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aspect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContributedBy")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("LastUpdateOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MediumId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PurposeId")
                        .HasColumnType("int");

                    b.Property<string>("Qualifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("MediumId");

                    b.HasIndex("PurposeId");

                    b.HasIndex("State");

                    b.ToTable("Terminal", (string)null);
                });

            modelBuilder.Entity("Tyle.Core.Attributes.AttributeGroupAttributeJoin", b =>
                {
                    b.HasOne("Tyle.Core.Attributes.AttributeGroup", "AttributeGroup")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tyle.Core.Attributes.AttributeType", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("AttributeGroup");
                });

            modelBuilder.Entity("Tyle.Core.Attributes.AttributeType", b =>
                {
                    b.HasOne("Tyle.Core.Attributes.RdlPredicate", "Predicate")
                        .WithMany()
                        .HasForeignKey("PredicateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Predicate");
                });

            modelBuilder.Entity("Tyle.Core.Attributes.AttributeUnitJoin", b =>
                {
                    b.HasOne("Tyle.Core.Attributes.AttributeType", "Attribute")
                        .WithMany("Units")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tyle.Core.Attributes.RdlUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Tyle.Core.Attributes.ValueConstraint", b =>
                {
                    b.HasOne("Tyle.Core.Attributes.AttributeType", "Attribute")
                        .WithOne("ValueConstraint")
                        .HasForeignKey("Tyle.Core.Attributes.ValueConstraint", "AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("Tyle.Core.Attributes.ValueListEntry", b =>
                {
                    b.HasOne("Tyle.Core.Attributes.ValueConstraint", "ValueConstraint")
                        .WithMany("ValueList")
                        .HasForeignKey("ValueConstraintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValueConstraint");
                });

            modelBuilder.Entity("Tyle.Core.Blocks.BlockAttributeTypeReference", b =>
                {
                    b.HasOne("Tyle.Core.Attributes.AttributeGroup", "AsPartOfAttributeGroup")
                        .WithMany()
                        .HasForeignKey("AttributeGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tyle.Core.Attributes.AttributeType", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tyle.Core.Blocks.BlockType", "Block")
                        .WithMany("Attributes")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsPartOfAttributeGroup");

                    b.Navigation("Attribute");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Tyle.Core.Blocks.BlockClassifierJoin", b =>
                {
                    b.HasOne("Tyle.Core.Blocks.BlockType", "Block")
                        .WithMany("Classifiers")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tyle.Core.Common.RdlClassifier", "Classifier")
                        .WithMany()
                        .HasForeignKey("ClassifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Classifier");
                });

            modelBuilder.Entity("Tyle.Core.Blocks.BlockTerminalTypeReference", b =>
                {
                    b.HasOne("Tyle.Core.Blocks.BlockType", "Block")
                        .WithMany("Terminals")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tyle.Core.Blocks.ConnectionPoint", "ConnectionPoint")
                        .WithMany()
                        .HasForeignKey("ConnectionPointId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tyle.Core.Terminals.TerminalType", "Terminal")
                        .WithMany()
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("ConnectionPoint");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("Tyle.Core.Blocks.BlockType", b =>
                {
                    b.HasOne("Tyle.Core.Common.RdlPurpose", "Purpose")
                        .WithMany()
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tyle.Core.Blocks.EngineeringSymbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Purpose");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("Tyle.Core.Blocks.ConnectionPoint", b =>
                {
                    b.HasOne("Tyle.Core.Blocks.EngineeringSymbol", "Symbol")
                        .WithMany("ConnectionPoints")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("Tyle.Core.Terminals.TerminalAttributeTypeReference", b =>
                {
                    b.HasOne("Tyle.Core.Attributes.AttributeGroup", "AsPartOfAttributeGroup")
                        .WithMany()
                        .HasForeignKey("AttributeGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tyle.Core.Attributes.AttributeType", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tyle.Core.Terminals.TerminalType", "Terminal")
                        .WithMany("Attributes")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsPartOfAttributeGroup");

                    b.Navigation("Attribute");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("Tyle.Core.Terminals.TerminalClassifierJoin", b =>
                {
                    b.HasOne("Tyle.Core.Common.RdlClassifier", "Classifier")
                        .WithMany()
                        .HasForeignKey("ClassifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tyle.Core.Terminals.TerminalType", "Terminal")
                        .WithMany("Classifiers")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classifier");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("Tyle.Core.Terminals.TerminalType", b =>
                {
                    b.HasOne("Tyle.Core.Terminals.RdlMedium", "Medium")
                        .WithMany()
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tyle.Core.Common.RdlPurpose", "Purpose")
                        .WithMany()
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Medium");

                    b.Navigation("Purpose");
                });

            modelBuilder.Entity("Tyle.Core.Attributes.AttributeGroup", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Tyle.Core.Attributes.AttributeType", b =>
                {
                    b.Navigation("Units");

                    b.Navigation("ValueConstraint");
                });

            modelBuilder.Entity("Tyle.Core.Attributes.ValueConstraint", b =>
                {
                    b.Navigation("ValueList");
                });

            modelBuilder.Entity("Tyle.Core.Blocks.BlockType", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Classifiers");

                    b.Navigation("Terminals");
                });

            modelBuilder.Entity("Tyle.Core.Blocks.EngineeringSymbol", b =>
                {
                    b.Navigation("ConnectionPoints");
                });

            modelBuilder.Entity("Tyle.Core.Terminals.TerminalType", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Classifiers");
                });
#pragma warning restore 612, 618
        }
    }
}
