name: CI - DEV

on:
  push:
    branches: [dev]

  workflow_dispatch:

env:
  nuget_source: https://api.nuget.org/v3/index.json

jobs:
  create-prerelease:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag_version.outputs.new_tag }}
      raw_tag: ${{ steps.tag_version.outputs.raw_tag  }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Bump version and push tag
        id: tag_version
        uses: mimir-org/mimir-actions/generate-release-tag-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          prefix: v
          suffix: preview
          target: major

      - name: Release
        if: ${{ steps.tag_version.outputs.new_tag != '' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag_version.outputs.raw_tag }}
          name: Release  ${{ steps.tag_version.outputs.new_tag }}
          generate_release_notes: true
          prerelease: true

      - name: Check Output Parameters
        if: ${{ steps.tag_version.outputs.new_tag != '' }}
        run: |
          echo "Tag: ${{ steps.release.outputs.new_tag }}"
          echo "Version: ${{ steps.release.outputs.new_version }}"

  build-client:
    uses: mimir-org/mimir-actions/.github/workflows/docker-build-push-cached.yaml@main
    with:
      repository: typelibrary-client
      tags: |
        dev
      context: ./src/client
      file: ./src/client/Dockerfile
      target: final
      hash_files_template: "**/package-lock.json"
      push: true
    secrets:
      REGISTRY_SERVER_URLS: ${{ secrets.REGISTRY_SERVER_URL }}
      REGISTRY_USERNAMES: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORDS: ${{ secrets.REGISTRY_PASSWORD }}

  build-server:
    uses: mimir-org/mimir-actions/.github/workflows/docker-build-push-cached.yaml@main
    with:
      repository: typelibrary-server
      tags: |
        dev
      context: ./src/server
      file: ./src/server/Dockerfile
      target: final
      hash_files_template: "**/*.csproj"
      push: true
    secrets:
      REGISTRY_SERVER_URLS: ${{ secrets.REGISTRY_SERVER_URL }}
      REGISTRY_USERNAMES: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORDS: ${{ secrets.REGISTRY_PASSWORD }}

  npm-Typelibrary:
    runs-on: ubuntu-latest
    needs: create-prerelease
    if: needs.create-prerelease.outputs.raw_tag != ''
    steps:
      - uses: actions/checkout@v2

      - name: Package typescript interfaces
        run: dotnet run
        working-directory: src/server/Mimirorg.Package

      - name: Generate npm package
        run: |

          mkdir typelibrary-types

          cd typelibrary-types

          cp -a ../src/server/Mimirorg.Package/template/. ./

          npm version ${{ needs.create-prerelease.outputs.raw_tag }}

          touch .npmrc

          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_MIMIRORG_AUTH }}" > .npmrc
          echo "//registry.npmjs.org/:always-auth=true" > .npmrc

      - name: Publish npm package
        run: npm public --access public
        working-directory: typelibrary-types

  nuget-Common:
    runs-on: ubuntu-latest
    needs: create-prerelease
    if: needs.create-prerelease.outputs.raw_tag != ''
    env:
      package_name: Mimirorg.Common
    defaults:
      run:
        working-directory: src/server
    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: dotnet build -c Release ${{env.package_name}}

      - name: Package Nuget
        run: dotnet pack -c Release --output . --include-source --include-symbols  --no-build -p:PackageVersion=${{needs.create-prerelease.outputs.raw_tag}} ${{env.package_name}}

      - name: Push
        run: dotnet nuget push ${{env.package_name}}.${{needs.create-prerelease.outputs.raw_tag}}.nupkg -k ${{secrets.NUGET_API_KEY}} --source ${{env.nuget_source}} --skip-duplicate

  nuget-TypeLibrary:
    runs-on: ubuntu-latest
    needs: create-prerelease
    if: needs.create-prerelease.outputs.raw_tag != ''
    env:
      package_name: Mimirorg.TypeLibrary
    defaults:
      run:
        working-directory: src/server
    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: dotnet build -c Release ${{env.package_name}}

      - name: Package Nuget
        run: dotnet pack -c Release --output . --include-source --include-symbols  --no-build -p:PackageVersion=${{needs.create-prerelease.outputs.raw_tag}} ${{env.package_name}}

      - name: Push
        run: dotnet nuget push ${{env.package_name}}.${{needs.create-prerelease.outputs.raw_tag}}.nupkg -k ${{secrets.NUGET_API_KEY}} --source ${{env.nuget_source}} --skip-duplicate
