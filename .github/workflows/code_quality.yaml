name: CI - Code Quality

on:
  pull_request:

  push:
    branches: [main, dev]

  workflow_dispatch:

jobs:
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      client-changed: ${{ steps.changes.outputs.client }}
      server-changed: ${{ steps.changes.outputs.server }}
      docker-client-changed: ${{ steps.changes.outputs.docker-client }}
      docker-server-changed: ${{ steps.changes.outputs.docker-server }}
    steps:
      - uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ github.ref }}
          filters: .github/change-filters.yaml

  ######### CLIENT ###########

  code-quality-client-build:
    needs: [check-for-changes]
    if: ${{ needs.check-for-changes.outputs.client-changed == 'true' }}
    uses: mimir-org/mimir-actions/.github/workflows/docker-build-push-cached.yaml@main
    with:
      repository: tyle-client
      context: ./src/client
      file: ./src/client/Dockerfile
      target: final
      hash_files_template: "**/package-lock.json"
      upload_artefact: ${{ needs.check-for-changes.outputs.docker-client-changed == 'true' }}

  code-quality-client-test:
    needs: [check-for-changes]
    if: ${{ needs.check-for-changes.outputs.client-changed == 'true' }}
    uses: mimir-org/mimir-actions/.github/workflows/docker-build-push-cached.yaml@main
    with:
      repository: tyle-client
      context: ./src/client
      file: ./src/client/Dockerfile
      target: test
      hash_files_template: "**/package-lock.json"

  code-quality-client-lint:
    needs: [check-for-changes]
    if: ${{ needs.check-for-changes.outputs.client-changed == 'true' }}
    uses: mimir-org/mimir-actions/.github/workflows/docker-build-push-cached.yaml@main
    with:
      repository: tyle-client
      context: ./src/client
      file: ./src/client/Dockerfile
      target: lint
      hash_files_template: "**/package-lock.json"

  code-quality-client-format:
    needs: [check-for-changes]
    if: ${{ needs.check-for-changes.outputs.client-changed == 'true' }}
    uses: mimir-org/mimir-actions/.github/workflows/docker-build-push-cached.yaml@main
    with:
      repository: tyle-client
      context: ./src/client
      file: ./src/client/Dockerfile
      target: format
      hash_files_template: "**/package-lock.json"

  ######### SERVER ###########

  code-quality-server-build:
    needs: [check-for-changes]
    if: ${{ needs.check-for-changes.outputs.server-changed == 'true' }}
    uses: mimir-org/mimir-actions/.github/workflows/docker-build-push-cached.yaml@main
    with:
      repository: tyle-server
      context: ./src/server
      file: ./src/server/Dockerfile
      target: final
      hash_files_template: "**/*.csproj"
      upload_artefact: ${{ needs.check-for-changes.outputs.docker-server-changed == 'true' }}

  code-quality-server-format:
    needs: [check-for-changes]
    if: ${{ needs.check-for-changes.outputs.server-changed == 'true' }}
    uses: mimir-org/mimir-actions/.github/workflows/docker-build-push-cached.yaml@main
    with:
      repository: tyle-server
      context: ./src/server
      file: ./src/server/Dockerfile
      target: format
      hash_files_template: "**/*.csproj"

  ######### DOCKER ###########

  code-quality-docker-client-security:
    needs: [check-for-changes, code-quality-client-build]
    if: ${{ needs.check-for-changes.outputs.docker-client-changed == 'true' }}
    runs-on: ubuntu-latest
    env:
      artefact_name: ${{ needs.code-quality-client-build.outputs.artefact_name }}
      image_name: tyle-client
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.artefact_name }}
          path: /tmp/${{ env.artefact_name }}

      - name: Load and tag docker image
        run: |
          load_output=$(docker load --input /tmp/${{ env.artefact_name }}/${{ env.image_name }})
          echo $load_output | sed -n 's/^Loaded image ID: sha256:\([0-9a-f]*\).*/\1/p' | xargs -i docker tag {} ${{ env.image_name }}

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_AUTH_TOKEN }}
        with:
          image: ${{ env.image_name }}
          args: --file=src/client/Dockerfile --severity-threshold=medium

  code-quality-docker-server-security:
    needs: [check-for-changes, code-quality-server-build]
    if: ${{ needs.check-for-changes.outputs.docker-server-changed == 'true' }}
    runs-on: ubuntu-latest
    env:
      artefact_name: ${{ needs.code-quality-server-build.outputs.artefact_name }}
      image_name: tyle-server
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.artefact_name }}
          path: /tmp/${{ env.artefact_name }}

      - name: Load and tag docker image
        run: |
          load_output=$(docker load --input /tmp/${{ env.artefact_name }}/${{ env.image_name }})
          echo $load_output | sed -n 's/^Loaded image ID: sha256:\([0-9a-f]*\).*/\1/p' | xargs -i docker tag {} ${{ env.image_name }}

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_AUTH_TOKEN }}
        with:
          image: ${{ env.image_name }}
          args: --file=src/server/Dockerfile --severity-threshold=medium
